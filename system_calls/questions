@ как выполняются инструкции процессором? (fetch, decode, execute, store).
@ какие есть в процессоре группы регистров? (integer alu, floating point alu, sse/mmx...).
@ что такое pipelining? (integer/floating point operations parallel execution).
@ что такое branch prediction?
@ что такое reordering?
@ cisc/risc?
  - (complex instruction set computer/reduced instruction set computer).
@ что такое и чем отличаются от обычных thread local variables? (compiler -> .tdata segment).
@ что такое cache line?
  - (small chunks of mirrored main memory in size 32 or 64 bytes).
@ что такое PIC
  - (programmable interrupt controller)?
@ что такое DMA?
  - (device raise an interrupt after put data in memory and driver can work with the data).
@ что такое cache snooping?
  - (proc listen on a special bus, which all processors are connected and update cache line stat).
  - используется для поддержания когерентности кэшей
@ что такое hyperthreading?
@ что такое cache coherency?
  - (dirty bit in cache line).
  - означает целостность данных в различных кэшах в момент времени
  - если один из них меняет данные, то cache line пометится как dirty, и второму кэшу надо будет проверить это
    в будущем и обновить свой кэш.
@ что такое atomic operation?
@ что такое locking?
@ что такое lock-free data structures?
@ чем отличаются semaphore vs mutex?
@ что такое condition variable? (readers and writers).
@ что такое os:
  a. userspace (processes)
    - libc
  b. kernel
    - system call interface
    - kernel code
      -- process management
      -- virtual file system (VFS)
      -- memory management
      -- network stack
      -- drivers
    - architecture dependent code
  c. hardware (directly or through drivers)
@ что такое vfs?
@ как устроен процесс?
  a. memory
    - kernel state (running state, disk wait state and e.t.c.)
    - shared libraries
    - stack (grow down)
    - heap (grow up)
    - bss
    - data
    - code
  b. files
  c. registers
  d. process id
@ какие есть виды ядер:
  a. monolithic
  b. microkernel (message passing between kernel and subprocesses + more code)
@ virtualization:
  a. hardware - hypervisor on low level (memory, cpus, disk -> guest oses)
  b. software - main os (memory, cpus, disk -> virtual hardware -> guest oses)
@ что такое system calls? (system call number known for kernel and userspace, libc).
@ чем отличаются сегменты cs, ds, ss? зачем нужно и как работают?
@ можно ли шарить память между процессами? потоками?
@ что такое call stack?
@ что такое stack frame?
@ posix api?
  - kernel syscalls
      (fork, exec, read, write, close, open, pthreads, signals, mkdir, unlink, chdir, chown, chmod, stat, access).
  - utilities
  - etc
@ kernel only api?
  - clone
  - inotify
  - epoll
@ что разделяют потоки? устройства процесса с потоками:
  a. process id (common)
  b. memory (common)
  c. files (common)
  d. thread id(s)
     - registers
     - stack
     - kernel state
  e. registered signals handlers
@ copy on write
@ как в системе возникают процессы zombies? как разруливаются системой? (return code of process must be collected).
@ что такое context switch?
 - TLB flushing (это процессорный кэш, для переключения потоков он не сбрасывается)
 - registers update
 - kernel data update
@ как работает shell? как запускаются программы?
@ как работают сигналы? можно ли продолжить выполнение после обработки сигнала? setjump/longjump?
@ какие атрибуты имеют страницы памяти? (read/write/execute).
@ как ядро хранит memory pages?
   - создаются специальные многоуровневые дескрипторы, которые хранят отмапленные страницы памяти и
     ссылку на другие дескрипторы. Если выделено мало, то и создавать и заполнять огромные таблицы не нужно.
@ как работает virtual memory?
@ что такое MMU?
  - блок управления памятью
  - наименьшая сущность, которой он управляет - страница
  - страница чаще всего имеет размер 4K для 32bit и 8K для 64bit.
  - страницы могут быть валидные и невалидные. Обращение к невалидым - нарушение сегментации.
  - страницы разных процессов могут ссылаться на одну и ту же область физ памяти (например, libc).
  - копирование при записи (copy-on-write).
  - ядро распределяет страницы по блокам (text, stack, data segment, bss).
@ что происходит, если кончилась оперативная память? как тогда работает virtual memory? (swap).
@ могут ли страницы вирутальной памяти разных процессов ссылаться на один адрес в памяти? (the same page table).
@ что такое TLB? (cache of virtual-page to physical-frame translations inside processor).
@ что будет, если страница не была найдена в TLB/MMU?
@ как происходит linking process (hash table)?
@ что такое load time relocation? Как работает?
@ что такое -fPIC (position independent code)? Зачем нужен? Плюсы по скорости работы?
@ что такое GOT/PLT? Как работает lazy procedure loading в GOT?
@ что такое LD_PRELOAD? Для чего и как работает?
@ что такое buffer cache в ядре для устройств (fs)?
@ почему нужно минимизировать system calls?
  - меняет остояние процессора из user mode -> kernel mode, CPU может работать с protected kernel memory
  - context switch
  - transfer arguments via registers by copy from function stack
  - инициируется trap machine instruction 0x80
  - значения регистров сохраняются в стеке ядра
  - меняет данные по адресам, переданным от userspace
  - помещает возвращаемое значение на стек
  - возвращает управление в userspace
@ что такое futex? (elementary userspace block which used to make a mutex).
@ как работают модули ядра? как они загружаются?
@ загрузка linux:
  - bios
  - mbr
  - grub
  - grub 1.5 stage, fs
  - kernel
  - initramfs
  - init process
  - runlevels or systemd scripts
@ что такое vmlinuz? почему он сжатый? кем разжимается? (self ungzip with small ungzip program at kernel start).
@ что такое initrams? зачем нужна? как ядро понимает фс? (temp fs, device drivers, etc, grub 1.5 stage loader).
@ endianess (little/big endian), как с ним работают?
@ что такое select/epoll? зачем нужен?
@ как и какие хранятся переменные в разделе bss процесса? какая там оптимизация?
  - при загрузке они заполняются просто нулями
  - при чем, не просто заполняются, а отражаются на страницы памяти, заполненные нулями, для оптимизации
@ что такое буферизация io на уровне kernel?
@ что такое буферизация io на уровне userspace?
@ что такое readv, writev? как реализованы read, write? какая у них особенность?
@ чем отличаются stdio функции для io от системных вызовов, типа read/write?
@ что такое flockfile? зачем нужен?
@ какие есть способы завершения процесса?
  - return
  - exit
  - signal
  - kernel interrupt (sefault, memory etc)
@ что такое daemon? что такое setsid()? как это работает?
  - создает новую сессию и группу процессов для данного процесса.
  - идентификатор группы будет равен идентификатору процесса.
  - процесс будет полностью отвязан от контролирующего терминала и его группы/сессии.
@ что такое scheduler? работоспособный процесс? ожидание данных? спящие процессы? асинхронность?
@ традиционый планировщик Linux (как распределяет кванты времени и приоритеты).
  - каждому процессу назначается квант времени
  - выполняются все процессы с назначенными квантами, по приоритетам
  - начинают назначаться новые кванты времени оставшимся процессам
@ Completely Fair Scheduler (как убрали кванты времени, время процессора и приоритеты).
  - от общего времени процессора N, каждому процессу назначается 1/N отрезок времени.
  - этот отрезок времени взвешивается в зависимости от его приоритета.
  - чем меньше приоритет, тем больше ресурсов процесс заберет.
@ nice зачем и как работает?
@ планировщик будет планировать процесс на одно и тот же ядро или разные? что такое привязка к процу?
  - затратно мигрировать процессы.
  - инвалидация кэша.
  - привязка нужна для чувствительных к кэшированию процессов.
@ pae (physical address extension)
  - 36 бит для адресации более 4Gb памяти (до 64Гб) с помощью многоуровневой адресац@ Сейчас она включена почти во всех системах Linux.
@ что такое системы реального времени?
@ в какие области памяти грузится ядро?
  - ядро грузится в нижние области памяти
  - каждый процесс также думает. что он находится в нижней области памяти 0x00000000 и его верхняя граница 0xFFFFFFFF (4byte)
@ асинхронность vs многопоточность
@ как поток может быть закрыт?
  - выход из стартовой процедуры
  - pthread_exit()
  - pthread_cancel() из другого потока
@ зачем необходимо делать для потоков join и detach?
  - для того, чтобы "собрать" завершившиеся потоки, как собирают процессы. Иначе будут в памяти ядра висеть данные.
@ что такое inode?
  - каждый файл представлен своим индексным дескриптором, у которого есть некий уникальный номер.
@ что такое ioctl?
  - подсказка - cdrom eject
  - узнать, сколько можно считать с помощью read
@ что такое inofity, watch?
@ что такое выравнивание адреса в памяти? (например, выравнивание до n байт).
  - malloc возвращает память, выровненную по 8-байтной границе для 32bit и по 16-байтной для 64bit.
  - posix_memalign(&buf, 256, 1024) - выделить 1К памяти, выровненной по 256-байт границе).
  - при работе со структурой, ее следует выравнивать по наибольшему из типов в ее составе.
  - если за char следует int, то компилятор вставит три 0 между типами в качестве заполнителя.
  - при обращении к данным через указатель, преобразованный из блока с меньшим выравниванием в блок с большим,
    возможна ситуация, в которой процессор будет загружать информацию, чье выравнивание не соответствует большей
    границе.
@ преимущества calloc перед malloc?
  - у него память выделяется с помощью анонимного отображения в память с помощью mmap.
  - такая память автоматически заполнена нулями, эффективно, уже в ядре.
  - такая память использует read-on-write принцип.
  - в некоторых случаях, malloc может использовать анонимные оторажения.
@ безопасно ли проверять на равенство две структуры с помощью операции memcmp?
  - нет, так как разные экземпляры могут быть заполнены с применением неинициализированного мусора для выравнивания.
@ что такое уступающее выделение памяти?
  - ядро выделяет память не сразу, а только когда к ней имеется явный доступ.
  - даже при явном доступе, выделяется не полный объем, а постранично.
  - при выделении каждой отдельной страницы используется механизм подкачки и copy-on-write.
  - все это реализует точечную работу только при явной необходимости.
@ как работают сигналы?
  - сначала сигнал порождается, например, пользователем.
  - потом ядро сохраняет сигнал, пока не сможет его доставить.
  - ядро останавливает процесс, и выполняет обработчик сигнала, определенный пользователем.
  - ядро формирует для этого обработчика свой собственный временный стек.
  - дочерний процесс имеет те же установленные обработчики сигналов, что и родительский.
  - обработчики сигналов должны работать только с реентерабельными функциями.
@ likely/unlikely/pure/const attributes.

****************************************************************************************************************

_________ CREATIONAL PATTERNS _________:

@ abstract factory
  - просто класс, который имеет реализованные методы из абстрактной фабрики, которые возвращают созданный объект.

@ builder
  - класс, который наследуется от базового билдера и имеет несколько реализованных методов для создания
    объекта по частям и метод для возвращения готового объекта.

@ factory method
  - это когда необходимо создавать объекты в зависимости от введенных данных.
    метод создания объектов просто case'ом уточняется какой объект создать в зависимости от исходных данных.

@ object pool
  - объект, который содержит список заранее созданных объектов, которые можно брать и возвращать в пул.

@ prototype
  - похож на factory method, но не просто создает объекты, а вызывает у каждого из них метод clone для создания
    и каждый объект возвращает копию себя. Сами такие объекты необходимо создать заранее.

@ singleton
  - объект, который может быть создан в системе только один.

_________ STRUCTURAL PATTERNS _________:

@ adapter
  - класс, который наследуется от другого класса и добавляет нужный новый функционал, маскируя его под
    текущие задачи.

@ bridge
  - есть базовый класс с определенной имплементацией pimpl. Есть производные классы, которые будут при создании
    подменять базовую имплементацию своей имплементацией. Конечно, имплементации наследуются от базовой.

@ composite
  - класс, который содержит в себе список базовых классов и который также наследуется от базового класса,
    чтобы стереть различия между объектом и группой таких объектов. Все они будут иметь один метод типа execute,
    но композитный будет выполнять его над всеми объектами, а один объект сам для себя.

@ decorator
  - возможность декорировать - добавлять новый функционал для данного виджета.
    например, есть базовый виджет и какой-то Text виджет, который будет обрамляться декораторами для полос
    прокрутки. Причем декораторы ведут себя как виджет и при вызове метода draw, делают что-то сами, а потом
    вызывают этот метод у своего сохраненного виджета.

@ facade
  - в зависимости от текущего состояния ФСМ объект передает управление следующему объекту, скрытому за фасадом,
    который соотноситься с соответствующим состоянием и хранится в аттрибутах фасада.

@ proxy
  - прокси класс, который может с помощью -> вернуть спец промежуточный класс, который имитирует данный, но
    выполнит другую работу.

****************************************************************************************************************





****************************************************************************************************************

@. наиболее совместимая модель OSI в ОС Unix:
  - уровень приложений (telnet, tftp)
  - уровень транспорта хост-хост (tcp, udp)
  - уровень интернета (ip и маршрутизация)
  - уровень доступа к сети (Ethernet, wi-fi)

@. отличие tcp от udp.
@. что такое octet в ip адресе?
@. что такое адрес ::1?
@. что такое порядок байтов хоста? как это используется? htons, htonl?
@. что такое inet_pton, inet_ntop?
@. что такое NAT (Network Address Translation)?
  - трансляция внутренних выделенных адресов в известный внешнему миру адрес.
@. что такое частные сети?
@. что такое getaddrinfo, getnameinfo?
@. что делает shutdown?
@. что делает close?
@. что делает bind?
@. что делает listen?
@. что делает accept?
@. что делает connect?
@. Если вы попытаетесь читать из неблокируемого сокета, а данных нет, он, неблокируемый, вернёт -1 и установит errno в EWOULDBLOCK
  - для этого нужно использовать функцию select/poll/epoll.
@. что такое netstat?
@. что такое route?
@. что происходит, когда recv возвращает 0?
@. как сделать таймаут при connect?
  - с помощью функции select нужно таумайтиться на открытом (неблокирующем заранее) сокете.
@. что такое resource limits, soft limit, hard limit?
@. чем отличаются static lib от shared lib?
@. в каких случаях может инициироваться прерывание:
  - Ctrl+C by user
  - дочерний процесс звершен (SIGCHLD)
  - alarm clock (timer) был выполнен
  - попытка доступа к невалидному адресу в памяти
@. когда доставляется сигнал процессу:
  - немедленно, если процесс в стадии выполнения
  - если процесс в стадии ожидания, то в следующий момент, когда планировщик его снова запустит
@. что такое группа процессов?
  - при выполнении сразу нескольких процессов (ls | less), для них создается группа процессов
  - один из процессов является лидером группы
  - каждый процесс имеет одинаковый process group identifier (идентификатор группы процессов)
@. что такое сессия?
  - это коллекция групп процессов
  - каждый процесс имеет одинаковый идентификатор сессии
  - лидер сессии - процесс, ее создавший, его ID равен ID сессии.
  - при создании группы процессов shell'ом, они принадлежат той же сессии, что и shell.
  - сессии имеют назначенный controlling terminal.
  - лидер сессии получит SIGHUP, если обнаружится отсоединение терминала.
  - в сессии группы процессов могут быть в background или foreground.
@. из чего состоит время работы процесса?
  - время работы в kernel
  - время работы в userspace
@. каким образом можно взаимодействиовать с ядром?
  - syscalls
  - /proc filesystem
@. что означает errno = EINTR?
  - системный вызов был прерван сигналом
@. что будет, если записать инфо за конец файла?
  - промежуточное пространство будет заполнено нулями (file hole)
  - они не занимают никакого места на диске (только если будет явная запись)
  - то есть размер файла может быть больше, чем он реально занимает на диске
@. что такое memory barrier?
  - позволяет пометить область кода, как выполняемую транзакционно
  - такая область не будет прервана сигналом
  - такая область не будет оптимизироваться компилятором и инструкции будут выполняться строго последовательно
@. что делает fcntl?
  - позволяет изменять флаги настроек у уже открытого файла
  - например, можно сделать его O_NONBLOCK
@. какой есть механизм поддержки файлов > 4Gb в libc?
  - специальные функции open64, lseek64, off_t64,...
  - специальный макрос, при объявлении которого, 32bit функции автоматически подменяются 64bit аналогами
  - из-за таких различий всегда при выводе в printf off_t следует использовать long long и %lld.
@. каким образом можно создать файл и запретить любую возможность доступа к нему?
  - можно создать, а потом unlink. Тогда его уже не будет в ФС, но fd будет открыт в процессе
  - такой механизм есть в функции для создания временных файлов tmpfile()
@. для чего нужны функции pread/pwrite/readv/writev/preadv/pwritev?
@. можно ли взять и обрезать файл или увеличить его до любого размера?
  - можно с помощью функции truncate.
@. как можно узнать для бинарника размер сегментов code, data, bss?
  - использовать утилиту size
@. как можно поместить локальную переменную не в стек, а в регистр?
  - современные оптимизации компилятора умеют выделять спец регистры для часто используемых переменных
@. как называется блоки, на которые разбиваются виртуальная память? (page)
@. как называются блоки, на которые разбивается RAM? (page frame)
@. если page отсутствует в виртуальной памяти, как она будет подгружаться?
  - если процесс обращается к странице, которой нет в вирт памяти, то будет сгенерировано прерывание page fault
    и страница будет подгружена из RAM или из swap.
@. в каких случаях может происходить изменение таблиц виртуальной памяти для процесса?
  - в случае, если выделяется память на куче malloc/free.
  - в случае, если выделяется отображаемая память mmap/munmap.
@. как реализованы исключения в c++?
@. как избежать порчи локальных переменных при попытке восстановить стек в функции longjump?
  - необходимо говорить компилятору отключить оптимизацию локальных переменых с помощью volatile.
@. как называется верхняя часть хучи в процессе? (program break, поэтому brk, sbrk).
@. какой механизм выделения памяти процессом? как там участвует program break? как работают brk/sbrk?
@. как работает free?
  - она не освобождает память на самом деле
  - т.к. память может находиться посредине кучи и сдвинуть program break невозможно
@. как работает malloc?
  - не выделяет на самом деле память, а просто сдвигает program break
  - ядро само будет выделять память по требованию
  - malloc вернет пользователю указатель на память, до которой будет лежать длина выделенного блока
  - также внутри он будет хранить список освобожденных блоков, которые будет потом переиспользовать
@. как работает alloca?
  - он выделяет память на стеке
  - данная память автоматически освобождается при выходе из функцией просто сменой SP
@. что такое real user id?
  - идентификатор пользователя в системе, как в файле passwd
@. что такое effective user id?
  - идентификатор пользователя для запущенного процесса
  - может быть установлен с помощью вызова некоторых system calls
  - или с помощью запуска программ с установленными set-user-ID/set-group-ID
@. что такое set-user-ID?
  - при запуске процесса effective user ID установится в значение, равное владельцу файла
  - chmod u+s file
@. зачем нужен системный вызов sysconf? (utility getconf)
  - специальный вызов, которым можно получать различные лимиты системы в рантайме
  - с помощью него можно делать более портируемый и гибкий код
@. LTO?
@. Lazy loading shared libs?
@. /proc filesystem
@. как можно управлять кэшированием в stdio?
  - есть специальные функции setvbuf, setbuf, setbuffer, которые позволяют указать буфер или отключить.
  - можно также использовать fflush, чтобы сбросить один или все stdio буферы.
@. как можно управлять кэшированием в kernel?
  - можно использовать функции fsync для файла, sync для всех устройств.
  - O_SYNC в open будет сбрасывать данные на диск при каждой записи.
@. что такое sysfs?
@. из каких частей состоит file system?
  - boot block (содержит данные для загрузки ОС)
  - superblock (содержит данные о размере inode table, logical block, количество logical blocks)
  - inode table (содержит таблицу inodes, которые предствляют собой уникальные записи для каждого файла)
  - data blocks (непосредственно данные для файлов на диске)
@. inode contains?
  - тип файла
  - owner
  - group
  - permissions
  - timestamps
  - hard links
  - size
  - количество выделенных блоков (может быть меньше размера)
  - указатели на блоки данных
@. что такое umask?
@. что такое вызов chroot?
@. как можно проверить, существует ли процесс с каким-то pid?
  - это можно сделать с помощью signal с pid, равным 0 и контролем ошибок.
  - с помощью семафора, который будет держать другой процесс
  - с помощью эксклюзивной file lock
  - можно открыть pipe и мониторить дескриптор на закрытие (когда он вернет 0 - end of file)
  - можно с помощью stat мониторить, жив ли процесс в /proc/pid
@. можно ли отправить сигнал только определенному потоку в процессе?
  - да, есть специальный системный вызов pthread_kill(pthread_self(), signum).
@. почему в handlere сигнала для переменных надо использовать volatile sig_atomic_t?
  - чтобы исключить оптимизацию компилятора, которая может записать переменную в регистр и при смене контекста мы потеряем значение
  - атомарность нужно для, того, что обновление глобальной переменной может происходит в несколько инструкций и быть прервано
@. что такое reentrant функции? почему malloc является nonreentrant? что можно писать в handler?
@. что такое sigaltstack?
@. зачем нужны sigsetjmp/siglongjmp?
  - они рзворачивают стек, а также обнуляют установленную маску сигналов для данного обработчика сигнал.
    обычные функции будут просто просто разворачивать стек, а некоторые сигналы могут остаться заблокированными.
@. что такое SA_RESTART флаг для sigaction?
  - много прерванных системных вызовов могут автоматически быть перезапущены.
@. зачем нужен sigprocmask, sigsuspend, sigwaitinfo, sigtimedwait?
@. что такое sticky bit?
@. что такое set-user-id?
@. как устроены исключения в c++?
@. что будет, если в многопоточной программе вызвать fork()?
  - в этом случае будут закрыты все остальные потоки
  - не будут вызваны cleanup функции и разблокированы mutexes.
  - поэтому может быть memory leak и dead lock на заблокированном mutex.
  - поэтому нужно сразу за таким fork() использовать exec(), чтобы полностью переписать память процесса.
@. что такое группа процессов и сессия?
  - группа процессов - совокупность процессов, один из которых является лидером группы
  - группа процессов имеет pid, равный pid'у лидера группы
  - сессия - совокупность групп процессов
  - в foregroung в сессии в один момент времени может быть только одна группа процессов,
    остальные находятся в background
  - при запуске login shell создается сессия с главной группой
  - при запуске команд каждый раз создаются новые группы процессов
  - ps xao pid,ppid,pgid,sid,comm,tty
  - setpgid - создаст новую группу процессов
  - setsid - создаст новую сессию и отсоединит контролирующий терминал
  - сигналы будут действовать на все процессы в группе
@. что такое controlling process?
  - терминал, который является лидером группы и открывает терминал tty, который автоматически
    становится для него контролирующим терминалом.
  - shell обычно является контролирующим процессом.
@. как работает механизм сессий и групп для графических оболочек?
@. как работает утилита nohup?
@. как работает daemon?
  - fork() - остается child и, т.к. parent выходит, он становится потомком процесса init.
    он не будет являться лидером группы, т.к. имеет новый pid и имеет старую pgid.
  - setsid() - новая сессия и отвязка от controlling terminal.
  - второй fork() позволяет сделать так, что grand child точно не будет являться лидером
    сессии, а значит, не сможет в будущем открыть controlling terminal. Значит, и не сможет
    больше принимать различные сигналы от ядра типа SIGHUP.
  - установить umask() для процесса, чтобы убедиться, что созданные файлы будут иметь
    правильные привилегии.
  - сменить текущую директорию
  - закрыть все файловые дескрипторы, т.к. все равно терминал был отсоединен.
@. зачем нужен ldconfig и какие правила именования shared libraries, realname, soname, linkername?
@. -rpath? -L? LD_LIBRARY_PATH? LDFLAGS? CFLAGS? CXXFLAGS?
@. когда использовать семофоры, а когда mutex?

********************************************************************************

Новое:

1. логирующий демон вызывает для файла логов file lock, чтобы никто не мог больше туда писать.
2. демоны умеют обрабатывать переполнение стека с помощью sigaltstack.
3. по таймеру писать в лог инфо о том, что "все хорошо".
4. попробовать передавать не по domain unix socket, а по abstract unix socket.
5. научиться логировать с помощью syslog.
6. супервизор запускается только 1 раз (flock/fcntl).
7. speaker & writer общаются через abstract namespace socket.

********************************************************************************

Написать автоматические скрипты, которые умеют:
- Настроить NFS на удаленном сервере.
- Настроить VPN на удаленном сервере.
- Настроить Bacula на удаленном сервере.
- Настроить Buildbot на удаленном сервере.
- Настроить redmine на удаленном сервере.
- Настроить Git server на удаленном сервере.

********************************************************************************

overleaf + resume template
texlive
resume.io
cakeresume.com

********************************************************************************

Apache Flume
Kafka
HDFS
Pig
Spark
Elasticsearch
Kibana
Filebeat
Метрики сервисов
InfluxDB
Kapacitor
Telegraf
Grafana

балансировка, кеширование, отказоустойчивость

RabbitMQ
опыт разработки модулей Apache и nginx;
Memcached

Московская Биржа





libpalm
logrotate

od -c -w8